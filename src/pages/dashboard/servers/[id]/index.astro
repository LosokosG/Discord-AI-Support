---
import DashboardLayout from "@/layouts/DashboardLayout.astro";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { buttonVariants } from "@/components/ui/button";
import { MessageSquare, Database, Settings, ExternalLink, Users, Clock, Bot, BarChart, Server } from "lucide-react";
import { supabaseClient } from "@/db/supabase.client";

const { id } = Astro.params;

// Wyświetl ID serwera do celów debugowania
console.log("Server ID from params:", id);

// Pobierz dane serwera z bazy danych
let server = null;
let connectionError = false;

try {
  // Próba pobrania serwera z bazy danych
  // Używamy .or() zamiast .eq() aby dać Supabase więcej swobody w dopasowaniu ID
  // niezależnie od tego czy jest ono stringiem czy liczbą
  console.log("Querying for server with ID:", id);
  const { data, error } = await supabaseClient
    .from("servers")
    .select("id, name, icon_url, active, config, created_at")
    .or(`id.eq.${id},id.eq."${id}"`)
    .maybeSingle();

  console.log("Server data from DB:", data);

  if (error) {
    console.error("Error fetching server:", error);
    connectionError = true;
  } else if (data) {
    server = data;
  }
} catch (err) {
  console.error("Failed to fetch server:", err);
  connectionError = true;
}

// Jeśli nie znaleziono serwera, przekieruj na stronę główną
if (!server) {
  console.log("Server not found, redirecting to dashboard");
  return Astro.redirect("/dashboard");
}

// Domyślne statystyki dla dashboardu (w przyszłości mogą być pobierane z rzeczywistych danych)
const stats = {
  knowledgeEntries: 0, // Default value
  conversations: 0, // Default value
  activeUsers: 42,
  uptime: "99.9%",
  responseTime: "1.2s",
  usage: "78%",
};

// If server.config exists and has knowledge/stats data, use it
if (server.config && typeof server.config === "object") {
  const config = server.config as Record<string, unknown>;
  if (config.knowledge && typeof config.knowledge === "object") {
    stats.knowledgeEntries = (config.knowledge as any).entries || 0;
  }
  if (config.stats && typeof config.stats === "object") {
    stats.conversations = (config.stats as any).conversations || 0;
  }
}

// Pobierz listę dostępnych serwerów do selektora
let availableServers: { id: string | number; name: string; active: boolean }[] = [];
try {
  const { data, error } = await supabaseClient.from("servers").select("id, name, active").order("name");

  if (!error && data) {
    availableServers = data;
  }
} catch (err) {
  console.error("Failed to fetch servers list:", err);
}

// Mock username - w rzeczywistej aplikacji, powinno pochodzić z autentykacji
const username = "Discord Admin";
---

<DashboardLayout
  title={`${server.name} - Dashboard`}
  activeTab="servers"
  serverName={server.name}
  serverIcon={server.icon_url || undefined}
  username={username}
>
  <div class="flex items-start w-full gap-6 p-6">
    <div class="flex-1 space-y-6">
      {
        connectionError && (
          <div class="bg-discord-red/10 text-discord-red p-3 rounded-md mb-4">
            Error connecting to the database. Some data may not be displayed correctly.
          </div>
        )
      }

      <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-2">
        <div>
          <h1 class="text-2xl font-bold tracking-tight text-discord-text-normal">{server.name}</h1>
          <p class="text-discord-text-muted">Server overview and statistics</p>
        </div>

        <div class="flex items-center bg-[#2B2D31] rounded-md p-2 shadow-md">
          <Server className="h-5 w-5 text-discord-text-muted mr-2" />
          <select
            id="server-selector"
            class="bg-transparent text-discord-text-normal border-none focus:outline-none focus:ring-0 text-sm font-medium"
          >
            <option value="" disabled selected>Change server</option>
            {
              availableServers.map((s) => (
                <option value={`/dashboard/servers/${s.id}`} selected={String(s.id) === id}>
                  {s.name}
                </option>
              ))
            }
          </select>
        </div>
      </div>

      <!-- Quick Actions Section - Now above statistics -->
      <Card className="bg-discord-background-secondary border-[#EDEEF0] shadow-lg">
        <CardHeader>
          <CardTitle className="text-discord-text-normal text-xl">Quick Actions</CardTitle>
          <CardDescription className="text-discord-text-muted text-base">Common tasks and shortcuts</CardDescription>
        </CardHeader>
        <CardContent>
          <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            <a
              href={`/dashboard/servers/${id}/knowledge`}
              class={buttonVariants({
                variant: "outline",
                size: "lg",
                class:
                  "justify-start bg-gradient-to-r from-[#5865F2] to-[#7983F5] border-none text-white hover:opacity-90 shadow-md h-14 text-base",
              })}
            >
              <Database className="mr-3 h-5 w-5" />
              Add knowledge
            </a>
            <a
              href={`/dashboard/servers/${id}/settings`}
              class={buttonVariants({
                variant: "outline",
                size: "lg",
                class:
                  "justify-start bg-gradient-to-r from-[#5865F2] to-[#7983F5] border-none text-white hover:opacity-90 shadow-md h-14 text-base",
              })}
            >
              <Settings className="mr-3 h-5 w-5" />
              Bot settings
            </a>
            <a
              href={`https://discord.com/channels/${id}`}
              target="_blank"
              rel="noopener noreferrer"
              class={buttonVariants({
                variant: "outline",
                size: "lg",
                class:
                  "justify-start bg-gradient-to-r from-[#5865F2] to-[#7983F5] border-none text-white hover:opacity-90 shadow-md h-14 text-base",
              })}
            >
              <ExternalLink className="mr-3 h-5 w-5" />
              Open in Discord
            </a>
          </div>
        </CardContent>
      </Card>

      <!-- Statistics Section -->
      <div>
        <h2 class="text-xl font-bold mb-4 text-discord-text-normal">Statistics</h2>
        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          <Card className="bg-discord-background-secondary border-[#EDEEF0] shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-base font-medium text-discord-text-normal">Knowledge Base</CardTitle>
              <Database className="h-5 w-5 text-discord-text-muted" />
            </CardHeader>
            <CardContent>
              <div class="text-3xl font-bold text-discord-text-normal">
                {stats.knowledgeEntries}
              </div>
              <p class="text-sm text-discord-text-muted mt-1">Knowledge base entries</p>
            </CardContent>
          </Card>

          <Card className="bg-discord-background-secondary border-[#EDEEF0] shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-base font-medium text-discord-text-normal">Conversations</CardTitle>
              <MessageSquare className="h-5 w-5 text-discord-text-muted" />
            </CardHeader>
            <CardContent>
              <div class="text-3xl font-bold text-discord-text-normal">
                {stats.conversations}
              </div>
              <p class="text-sm text-discord-text-muted mt-1">Bot conversations today</p>
            </CardContent>
          </Card>

          <Card className="bg-discord-background-secondary border-[#EDEEF0] shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-base font-medium text-discord-text-normal">Active Users</CardTitle>
              <Users className="h-5 w-5 text-discord-text-muted" />
            </CardHeader>
            <CardContent>
              <div class="text-3xl font-bold text-discord-text-normal">
                {stats.activeUsers}
              </div>
              <p class="text-sm text-discord-text-muted mt-1">Users today</p>
            </CardContent>
          </Card>

          <Card className="bg-discord-background-secondary border-[#EDEEF0] shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-base font-medium text-discord-text-normal">Uptime</CardTitle>
              <Clock className="h-5 w-5 text-discord-text-muted" />
            </CardHeader>
            <CardContent>
              <div class="text-3xl font-bold text-discord-text-normal">
                {stats.uptime}
              </div>
              <p class="text-sm text-discord-text-muted mt-1">Bot availability</p>
            </CardContent>
          </Card>

          <Card className="bg-discord-background-secondary border-[#EDEEF0] shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-base font-medium text-discord-text-normal">Response Time</CardTitle>
              <Bot className="h-5 w-5 text-discord-text-muted" />
            </CardHeader>
            <CardContent>
              <div class="text-3xl font-bold text-discord-text-normal">
                {stats.responseTime}
              </div>
              <p class="text-sm text-discord-text-muted mt-1">Average response</p>
            </CardContent>
          </Card>

          <Card className="bg-discord-background-secondary border-[#EDEEF0] shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-base font-medium text-discord-text-normal">Usage</CardTitle>
              <BarChart className="h-5 w-5 text-discord-text-muted" />
            </CardHeader>
            <CardContent>
              <div class="text-3xl font-bold text-discord-text-normal">
                {stats.usage}
              </div>
              <p class="text-sm text-discord-text-muted mt-1">Resource utilization</p>
            </CardContent>
          </Card>

          <Card className="bg-discord-background-secondary border-[#EDEEF0] shadow-lg">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-base font-medium text-discord-text-normal">Configuration</CardTitle>
              <Settings className="h-5 w-5 text-discord-text-muted" />
            </CardHeader>
            <CardContent>
              <div class="text-3xl font-bold text-discord-text-normal">Active</div>
              <p class="text-sm text-discord-text-muted mt-1">Server settings status</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  </div>
</DashboardLayout>

<script>
  // Handle server selection change
  const serverSelector = document.getElementById("server-selector");

  if (serverSelector) {
    serverSelector.addEventListener("change", function () {
      // TypeScript assertion for HTML select element
      const select = this as HTMLSelectElement;
      if (select.value) {
        console.log("Redirecting to server:", select.value);
        window.location.href = select.value;
      }
    });
  }
</script>
