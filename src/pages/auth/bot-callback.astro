---
import { createSupabaseServerInstance } from "../../db/supabase.server";

export const prerender = false;

// Get request parameters
const url = new URL(Astro.request.url);
const code = url.searchParams.get("code");
const state = url.searchParams.get("state");

console.log("游닉 [auth/bot-callback] Processing bot callback", { hasCode: !!code, hasState: !!state });

// Initialize response data
let errorMessage = "";
let guildId = "";
let redirectUrl = "/dashboard";
let debugInfo = "";

if (!code || !state) {
  errorMessage = "Missing required OAuth parameters";
  console.error("游닉 [auth/bot-callback] Missing required OAuth parameters", { code: !!code, state: !!state });
} else {
  try {
    // Parse state parameter (contains server information)
    const stateData = JSON.parse(decodeURIComponent(state));
    guildId = stateData.guild_id;
    const guildName = stateData.guild_name;
    const guildIcon = stateData.guild_icon;

    console.log("游닉 [auth/bot-callback] Parsed state data", { guildId, guildName, hasIcon: !!guildIcon });

    // If we have guild information, proceed to save it
    if (guildId && guildName) {
      // Create Supabase instance
      const supabase = createSupabaseServerInstance({
        cookies: Astro.cookies,
        headers: Astro.request.headers,
      });

      // Verify user is authenticated
      const {
        data: { session },
      } = await supabase.auth.getSession();

      if (!session) {
        errorMessage = "Authentication required. Please login first.";
        redirectUrl = "/auth/login";
        console.error("游닉 [auth/bot-callback] No auth session found");
      } else {
        try {
          console.log("游닉 [auth/bot-callback] User authenticated", {
            userId: session.user?.id,
            hasAccessToken: !!session.access_token,
            hasProviderToken: !!session.provider_token,
          });

          // Construct icon URL if available
          const iconUrl = guildIcon ? `https://cdn.discordapp.com/icons/${guildId}/${guildIcon}.png` : null;

          // Create server config that matches the database schema
          const serverConfig = {
            enabled: true,
            channels: [],
            language: "en",
            system_prompt: "You are a helpful AI assistant for this Discord server.",
            max_text_length: 2000,
            support_role_id: null,
            max_messages_per_user: 10,
            welcomeMessage: "Hello! I'm a support bot ready to help you.",
          };

          const payload = {
            id: guildId,
            name: guildName,
            iconUrl: iconUrl,
            config: serverConfig,
          };

          console.log("游닉 [auth/bot-callback] Attempting to create server:", JSON.stringify(payload));

          // Create server in database via API
          const response = await fetch(`${url.origin}/api/servers`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${session.access_token}`,
            },
            body: JSON.stringify(payload),
          });

          console.log("游닉 [auth/bot-callback] Server API response:", {
            status: response.status,
            statusText: response.statusText,
            contentType: response.headers.get("content-type"),
          });

          // Check if the response is successful (200 OK or 201 Created)
          if (response.ok) {
            try {
              // Try to parse as JSON if possible
              const contentType = response.headers.get("content-type");
              if (contentType && contentType.includes("application/json")) {
                const result = await response.json();
                console.log("游닉 [auth/bot-callback] Server created successfully:", result);
              } else {
                // Even if not JSON, if status is OK, consider it successful
                console.log(
                  "游닉 [auth/bot-callback] Server created successfully (non-JSON response):",
                  response.status,
                  response.statusText
                );
              }
              // No error, server was created or already exists
              errorMessage = "";
            } catch (parseError) {
              console.log("游닉 [auth/bot-callback] Server created but could not parse response:", parseError);
              // Still consider it successful as the HTTP status was OK
              errorMessage = "";
            }
          } else {
            // Handle error responses
            try {
              const contentType = response.headers.get("content-type");
              if (contentType && contentType.includes("application/json")) {
                const result = await response.json();

                // Log detailed error information
                console.error("游닉 [auth/bot-callback] Server creation failed:", {
                  status: response.status,
                  statusText: response.statusText,
                  result,
                });

                if (response.status === 409) {
                  console.log("游닉 [auth/bot-callback] Server already exists, redirecting to dashboard");
                  // Not an error, just redirect
                  errorMessage = "";
                } else {
                  errorMessage = `Error saving server: ${result.error?.message || result.error?.code || "Unknown error"}`;
                  debugInfo = JSON.stringify(result);
                }
              } else {
                // Handle non-JSON error response
                const textResponse = await response.text();
                console.error("游닉 [auth/bot-callback] Non-JSON error response received:", {
                  status: response.status,
                  statusText: response.statusText,
                  contentType,
                  textPreview: textResponse.substring(0, 100),
                });

                errorMessage = "Failed to save server information";
                debugInfo = `Non-JSON error response: ${response.status} ${response.statusText}`;
              }
            } catch (error) {
              console.error("游닉 [auth/bot-callback] Error processing server creation response:", error);
              errorMessage = "Failed to process server response";
              debugInfo = error instanceof Error ? error.message : String(error);
            }
          }

          // Set redirect to server dashboard
          redirectUrl = `/dashboard/servers/${guildId}`;

          // Verify that the server was actually saved in the database
          try {
            console.log("游닉 [auth/bot-callback] Verifying server was saved in database...");
            const { data: serverInDb, error: dbError } = await supabase
              .from("servers")
              .select("id, name, icon_url")
              .eq("id", guildId)
              .maybeSingle();

            if (dbError) {
              console.error("游닉 [auth/bot-callback] Error verifying server in database:", dbError);
            } else if (serverInDb) {
              console.log("游닉 [auth/bot-callback] Server verified in database:", serverInDb);
            } else {
              console.error("游닉 [auth/bot-callback] Server NOT found in database after creation!");

              // Try to create the server directly as a fallback
              try {
                console.log("游닉 [auth/bot-callback] Attempting direct database insert as fallback");
                const { data: insertResult, error: insertError } = await supabase
                  .from("servers")
                  .insert({
                    id: guildId,
                    name: guildName,
                    icon_url: iconUrl,
                    config: serverConfig,
                    active: true,
                  })
                  .select()
                  .single();

                if (insertError) {
                  console.error("游닉 [auth/bot-callback] Fallback insert failed:", insertError);
                } else {
                  console.log("游닉 [auth/bot-callback] Fallback insert succeeded:", insertResult);
                }
              } catch (fallbackError) {
                console.error("游닉 [auth/bot-callback] Fallback insert exception:", fallbackError);
              }
            }
          } catch (verifyError) {
            console.error("游닉 [auth/bot-callback] Error during verification:", verifyError);
          }
        } catch (error) {
          console.error("游닉 [auth/bot-callback] Error creating server:", error);
          errorMessage = "Failed to save server information";
          debugInfo = error instanceof Error ? error.message : String(error);
        }
      }
    } else {
      errorMessage = "Invalid server information";
      console.error("游닉 [auth/bot-callback] Invalid server information", {
        hasGuildId: !!guildId,
        hasGuildName: !!guildName,
      });
    }
  } catch (error) {
    console.error("游닉 [auth/bot-callback] Error parsing state:", error);
    errorMessage = "Invalid state parameter";
    debugInfo = error instanceof Error ? error.message : String(error);
  }
}

// Calculate delay based on error status
const delay = errorMessage ? 5000 : 2000;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Processing Bot Installation</title>
    <style>
      body {
        font-family:
          system-ui,
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          Roboto,
          Oxygen,
          Ubuntu,
          Cantarell,
          "Open Sans",
          "Helvetica Neue",
          sans-serif;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        margin: 0;
        background-color: #f5f5f5;
      }
      .container {
        text-align: center;
        padding: 2rem;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        max-width: 400px;
      }
      .spinner {
        width: 40px;
        height: 40px;
        margin: 1rem auto;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-left-color: #646cff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }
      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }
      .error {
        color: #e11d48;
        margin: 1rem 0;
      }
      .debug {
        font-size: 10px;
        color: #666;
        overflow-wrap: break-word;
        margin-top: 1rem;
        text-align: left;
        max-height: 100px;
        overflow-y: auto;
      }
    </style>
  </head>
  <body>
    <div class="container">
      {
        errorMessage ? (
          <>
            <h2>Error</h2>
            <p class="error">{errorMessage}</p>
            <p>Redirecting to dashboard in a moment...</p>
            {debugInfo && <div class="debug">Debug: {debugInfo}</div>}
          </>
        ) : (
          <>
            <h2>Bot Added Successfully!</h2>
            <p>We're setting up your server...</p>
          </>
        )
      }
      <div class="spinner"></div>
    </div>

    <script define:vars={{ redirectUrl, delay }}>
      // Redirect after delay
      setTimeout(() => {
        window.location.href = redirectUrl;
      }, delay);
    </script>
  </body>
</html>
