// Global DTO & Command Model definitions derived from database.types
// NOTE: This file is generated by analysing Supabase DB schema (src/db/database.types.ts)
// and REST API plan (.ai/api-plan.md). Any breaking change in the DB will surface
// as a TypeScript error thanks to the explicit references to `Tables<...>` types
// exported by the generated Supabase client.

import type { Tables } from "./db/database.types";

/* -------------------------------------------------------------------------- */
/*                                Utilities                                   */
/* -------------------------------------------------------------------------- */

// Convert snake_case keys coming from the database into camelCase keys that are
// idiomatic for the TypeScript/JS world. It keeps the original value types.
// Recursive for nested objects.
// If a key does not contain an underscore it is left untouched.
export type CamelCase<S extends string> = S extends `${infer P}_${infer R}`
  ? `${Lowercase<P>}${Capitalize<CamelCase<R>>}` // ex: created_at -> createdAt
  : S;

export type Camelize<T> = {
  [K in keyof T as CamelCase<Extract<K, string>>]: T[K] extends Record<string, unknown> ? Camelize<T[K]> : T[K];
};

/** Generic pagination envelope returned by most list endpoints. */
export interface PaginatedResponse<T> {
  data: T[];
  page: number;
  pageSize: number;
  total: number;
}

/** Standardised error response shape (see API plan §8). */
export interface ErrorFieldDetail {
  field: string;
  message: string;
}

export interface ErrorResponse {
  error: {
    code: number;
    message: string;
    details?: ErrorFieldDetail[];
  };
}

/* -------------------------------------------------------------------------- */
/*                                  DTOs                                      */
/* -------------------------------------------------------------------------- */

// USERS ---------------------------------------------------------------------
// Response model for authenticated Discord users.
// Source table: public.users
// The DTO is intentionally minimal to avoid exposing internal bookkeeping.
type UserRow = Tables<"users">;
/**
 * DTO: Public representation of an application user.
 * Returned by the authentication endpoints (e.g. GET `/auth/me`).
 * Mirrors the `users` table but exposes only non‑sensitive columns and uses camelCase keys.
 */
export type User = Camelize<
  Pick<UserRow, "id" | "discord_id" | "discord_username" | "avatar_url" | "created_at" | "updated_at">
>;

// SERVERS -------------------------------------------------------------------
// Source table: public.servers
type ServerRow = Tables<"servers">;

/**
 * DTO: Lightweight guild/server record used in list views (GET `/servers`).
 * Contains basic configuration flags and the bot status for a guild.
 */
export type Server = Camelize<Pick<ServerRow, "id" | "name" | "active" | "config" | "icon_url">>;

/**
 * DTO: Full server details returned by GET `/servers/{id}`.
 * Extends `Server` with timestamps and billing information.
 */
export type ServerDetail = Camelize<
  Pick<ServerRow, "id" | "name" | "active" | "config" | "icon_url" | "created_at" | "updated_at" | "plan_id">
>;

/** Paginated list envelope for servers (GET `/servers`). */
export type ServerList = PaginatedResponse<Server>;

// SERVER ADMINS -------------------------------------------------------------
// Source table: public.server_admins
/** Maps users to servers where they have admin rights (GET `/servers/{id}/admins`). */
export type ServerAdmin = Camelize<Tables<"server_admins">>;

// KNOWLEDGE DOCUMENTS --------------------------------------------------------
// Source table: public.knowledge_documents
type DocRow = Tables<"knowledge_documents">;
/** DTO: Metadata of a document powering the knowledge‑base (GET `/servers/{id}/documents`). */
export type KnowledgeDocument = Camelize<Pick<DocRow, "id" | "title" | "file_type" | "created_at" | "updated_at">>;
export type DocumentList = PaginatedResponse<KnowledgeDocument>;

// CONVERSATIONS -------------------------------------------------------------
// Source table: public.conversations
type ConversationRow = Tables<"conversations">;
/** DTO: Transcript and status of a chat between a user and the bot. */
export type Conversation = Camelize<ConversationRow>;
export type ConversationList = PaginatedResponse<Conversation>;

// FORWARDED TICKETS ---------------------------------------------------------
// Source table: public.forwarded_tickets
type TicketRow = Tables<"forwarded_tickets">;
/** DTO: Human‑support ticket created from a conversation escalation. */
export type ForwardedTicket = Camelize<TicketRow>;
export type TicketList = PaginatedResponse<ForwardedTicket>;

// ANALYTICS -----------------------------------------------------------------
// Source table: public.analytics
type AnalyticsRow = Tables<"analytics">;
/** DTO: Daily aggregated metrics for a server (GET `/servers/{id}/analytics`). */
export type AnalyticsDay = Camelize<
  Pick<AnalyticsRow, "date" | "total_queries" | "resolved_queries" | "forwarded_tickets" | "average_response_time">
>;
export type AnalyticsList = PaginatedResponse<AnalyticsDay>;

// BILLING & SUBSCRIPTION ----------------------------------------------------
// Source tables: public.billing_plans / subscriptions / invoices
/** DTOs representing billing artefacts (public billing endpoints). */
export type BillingPlan = Camelize<Tables<"billing_plans">>;
export type Subscription = Camelize<Tables<"subscriptions">>;
export type Invoice = Camelize<Tables<"invoices">>;

/* -------------------------------------------------------------------------- */
/*                               Command Models                               */
/* -------------------------------------------------------------------------- */

// Command models are request bodies for POST/PATCH endpoints. They are typed
// against Supabase column types to ensure compile‑time safety when DB schema
// evolves.

// SERVERS -------------------------------------------------------------------
/** Request payload for POST `/servers` (create guild configuration). */
export interface CreateServerCommand {
  /** Discord guild ID – primary key */
  id: ServerRow["id"];
  /** Human‑readable server name */
  name: ServerRow["name"];
  /** Optional icon URL supplied by Discord API */
  iconUrl?: ServerRow["icon_url"];
  /** Initial bot configuration JSON (language, system prompt, etc.) */
  config?: ServerRow["config"];
}

/** Partial payload for PATCH `/servers/{id}` (update configuration). */
export interface UpdateServerCommand {
  name?: ServerRow["name"];
  iconUrl?: ServerRow["icon_url"];
  config?: ServerRow["config"];
  /** Activate / deactivate bot for this server */
  active?: ServerRow["active"];
}

// KNOWLEDGE DOCUMENTS -------------------------------------------------------
/** JSON alternative to multipart document upload (POST `/documents`). */
export interface UploadDocumentCommand {
  title: DocRow["title"];
  /** Raw text content for txt or md documents */
  content: DocRow["content"];
  /** File type - currently only 'txt' or 'md' are supported */
  fileType: DocRow["file_type"];
}

/** Payload for PATCH `/documents/{docId}`. */
export interface UpdateDocumentCommand {
  title?: DocRow["title"];
  content?: DocRow["content"];
}

// CONVERSATIONS -------------------------------------------------------------
/** Bot‑side upsert for transcripts (POST `/conversations`). */
export interface CreateConversationCommand {
  channelId: ConversationRow["channel_id"];
  threadId?: ConversationRow["thread_id"];
  userId: ConversationRow["user_id"];
  username: ConversationRow["username"];
  /** Full transcript array at creation time */
  transcript: ConversationRow["transcript"];
  /** Conversation status (open, completed, forwarded) */
  status?: ConversationRow["status"];
}

/** Dashboard mutation to update status or append transcript. */
export interface UpdateConversationCommand {
  status?: ConversationRow["status"];
  /** Appendix chunk or full transcript replacement */
  transcript?: ConversationRow["transcript"];
}

// TICKETS -------------------------------------------------------------------
/** Agent workflow mutation for tickets (PATCH `/tickets/{ticketId}`). */
export interface UpdateTicketCommand {
  assignedTo?: TicketRow["assigned_to"];
  status?: TicketRow["status"];
  resolutionNotes?: TicketRow["resolution_notes"];
}

// BILLING -------------------------------------------------------------------
/** Subscribe server to a billing plan (POST `/subscription`). */
export interface SubscribePlanCommand {
  planId: Tables<"subscriptions">["plan_id"];
}

/** Upgrade, downgrade or cancel an existing subscription. */
export interface UpdateSubscriptionCommand {
  planId?: Tables<"subscriptions">["plan_id"];
  status?: Tables<"subscriptions">["status"];
}

// ADMIN LIST MANAGEMENT -----------------------------------------------------
/** Adds a Discord user as server admin (POST `/servers/{id}/admins`). */
export interface AddAdminCommand {
  discordId: UserRow["discord_id"];
}

/** Removes server admin (DELETE `/servers/{id}/admins/{userId}`). */
export interface RemoveAdminCommand {
  userId: UserRow["id"];
}

// MIDDLEWARE TYPES ----------------------------------------------------------
// No global namespace declaration needed - we use type assertions in the middleware
